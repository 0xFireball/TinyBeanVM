-------------------
v0.1:
basic parser using byte[]
-------------------
v0.1.1
realized byte was only 0-255
so rewrote using shorts
working ASM with 3 commands: lda,mov, and dmpreg
dmpreg 0,0 (the 0,0 is irrelevant, dumps the registers to console)
plan to add memory in the next version
-------------------
v0.1.2
added memory.
memory addressed with $1 to access memory[1].
memory is 4096B, or 4KiB.
dmpmem 0,0 to dump memory, again, 0,0 are irrelevant.
plan to add stack in next version
-------------------
v0.1.3
add stack.
it works.
-------------------
v0.1.4
more bug fixes
-------------------
v0.2.0
add labels (labelname:) no indent
add jmp
example:
bob:
 mov a,1
start:
 jmp :bob
jmp to :[labelname]
plan to add add,sub commands
v0.2.1
add add command
plan to add sub, cmp commands
possibly jz, jnz
v0.2.1.2
add sub command
PLAN TO ADD JZ AND JNZ seriously!
ADD CMP!!! COME ON!
v0.2.2
(finally)
added CMP, JZ, JNZ
added lma - load a into a location in memory.
v0.2.2.1
weird bug fixes
v0.2.3
fix bugs
v0.2.5
EXIT <exit code> command.
v0.3.0
changed major version; no longer backwards compatiable.
NEW COMMANDS:
 .org <memory counter location start>    {WITH THE SPACE}
 .mem 'some string',0          {loads some memory starting at .org location. .org is incremented by the length of the string+1}
CHANGES:
the print function (bcall *1) now prints from memory, not the stack.
v0.3.1
-Built in debugger mode and dissassembler mode, use -debug and -disassemble. Disassemble mode includes debug mode.